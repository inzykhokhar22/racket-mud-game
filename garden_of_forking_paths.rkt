#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 0 1
#"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1
          0 1692 0 27 3 12 #"#lang racket"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 6 #"srfi/1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 7 #"srfi/13"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 7 #"srfi/48"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; items in the game"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"objects"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 2 #"(("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"a revolver\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"a watch\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 19 3 14 #"\"a red pencil\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 12 #";; world map"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"descriptions"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 2 #"(("
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 19 3 31 #"\"You are at the train station.\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 19 3 22 #"\"You are on the road.\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 19 3 22 #"\"You are on the road.\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 19 3 22 #"\"You are on the road.\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 19 3 27 #"\"You are before old gates.\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 19 3 24 #"\"You are in the garden.\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 19 3 23 #"\"You are in the house.\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; define actions that are possible in rooms"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"look"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"((("
0 0 14 3 10 #"directions"
0 0 23 3 2 #") "
0 0 14 3 4 #"look"
0 0 23 3 4 #") (("
0 0 14 3 4 #"look"
0 0 23 3 2 #") "
0 0 14 3 4 #"look"
0 0 23 3 4 #") (("
0 0 14 3 7 #"examine"
0 0 23 3 1 #" "
0 0 14 3 4 #"room"
0 0 23 3 2 #") "
0 0 14 3 4 #"look"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"pick"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"((("
0 0 14 3 3 #"get"
0 0 23 3 2 #") "
0 0 14 3 4 #"pick"
0 0 23 3 4 #") (("
0 0 14 3 6 #"pickup"
0 0 23 3 2 #") "
0 0 14 3 4 #"pick"
0 0 23 3 4 #") (("
0 0 14 3 4 #"pick"
0 0 23 3 2 #") "
0 0 14 3 4 #"pick"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"put"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"((("
0 0 14 3 3 #"put"
0 0 23 3 2 #") "
0 0 14 3 4 #"drop"
0 0 23 3 4 #") (("
0 0 14 3 4 #"drop"
0 0 23 3 2 #") "
0 0 14 3 4 #"drop"
0 0 23 3 4 #") (("
0 0 14 3 5 #"place"
0 0 23 3 2 #") "
0 0 14 3 4 #"drop"
0 0 23 3 4 #") (("
0 0 14 3 6 #"remove"
0 0 23 3 2 #") "
0 0 14 3 4 #"drop"
0 0 23 3 4 #" )))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"inventory"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"((("
0 0 14 3 9 #"inventory"
0 0 23 3 2 #") "
0 0 14 3 9 #"inventory"
0 0 23 3 4 #") (("
0 0 14 3 3 #"bag"
0 0 23 3 2 #") "
0 0 14 3 9 #"inventory"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"quit"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 3 #"((("
0 0 14 3 4 #"exit"
0 0 23 3 1 #" "
0 0 14 3 4 #"game"
0 0 23 3 2 #") "
0 0 14 3 4 #"quit"
0 0 23 3 4 #") (("
0 0 14 3 4 #"quit"
0 0 23 3 1 #" "
0 0 14 3 4 #"game"
0 0 23 3 2 #") "
0 0 14 3 4 #"quit"
0 0 23 3 4 #") (("
0 0 14 3 4 #"exit"
0 0 23 3 2 #") "
0 0 14 3 4 #"quit"
0 0 23 3 4 #") (("
0 0 14 3 4 #"quit"
0 0 23 3 2 #") "
0 0 14 3 4 #"quit"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"actions"
0 0 23 3 1 #" "
0 0 20 3 1 #"`"
0 0 23 3 1 #"("
0 0 27 3 2 #",@"
0 0 14 3 4 #"look"
0 0 23 3 1 #" "
0 0 27 3 2 #",@"
0 0 14 3 4 #"pick"
0 0 23 3 1 #" "
0 0 27 3 2 #",@"
0 0 14 3 3 #"put"
0 0 23 3 1 #" "
0 0 27 3 2 #",@"
0 0 14 3 8 #"inventor"
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 27 3 2 #",@"
0 0 14 3 4 #"quit"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; directions map"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; note some paths are made infinite by reason"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"decisiontable"
0 0 23 3 1 #" "
0 0 20 3 1 #"`"
0 0 23 3 2 #"(("
0 0 20 3 1 #"1"
0 0 23 3 3 #" (("
0 0 14 3 4 #"road"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 27 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 20 3 1 #"2"
0 0 23 3 3 #" (("
0 0 14 3 4 #"left"
0 0 23 3 2 #") "
0 0 20 3 1 #"3"
0 0 23 3 4 #") (("
0 0 14 3 5 #"right"
0 0 23 3 2 #") "
0 0 20 3 1 #"3"
0 0 23 3 4 #") (("
0 0 14 3 7 #"station"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 2 #") "
0 0 27 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 20 3 1 #"3"
0 0 23 3 3 #" (("
0 0 14 3 4 #"left"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 4 #") (("
0 0 14 3 5 #"right"
0 0 23 3 2 #") "
0 0 20 3 1 #"3"
0 0 23 3 4 #") (("
0 0 14 3 4 #"back"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 2 #") "
0 0 27 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 20 3 1 #"4"
0 0 23 3 3 #" (("
0 0 14 3 4 #"left"
0 0 23 3 2 #") "
0 0 20 3 1 #"5"
0 0 23 3 4 #") (("
0 0 14 3 5 #"right"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 4 #") (("
0 0 14 3 4 #"back"
0 0 23 3 2 #") "
0 0 20 3 1 #"3"
0 0 23 3 2 #") "
0 0 27 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 20 3 1 #"5"
0 0 23 3 3 #" (("
0 0 14 3 8 #"entrance"
0 0 23 3 2 #") "
0 0 20 3 1 #"6"
0 0 23 3 4 #") (("
0 0 14 3 4 #"back"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 2 #") "
0 0 27 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 20 3 1 #"6"
0 0 23 3 3 #" (("
0 0 14 3 5 #"house"
0 0 23 3 2 #") "
0 0 20 3 1 #"7"
0 0 23 3 4 #") (("
0 0 14 3 3 #"out"
0 0 23 3 2 #") "
0 0 20 3 1 #"5"
0 0 23 3 2 #") "
0 0 27 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 20 3 1 #"7"
0 0 23 3 3 #" (("
0 0 14 3 3 #"out"
0 0 23 3 2 #") "
0 0 20 3 1 #"6"
0 0 23 3 2 #") "
0 0 27 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; code to keep items in pockets"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";; items in the room"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"objectdb"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; items in the possesion"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"inventorydb"
0 0 23 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; function to add an item to hash table"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"add-object"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 6 #"object"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 6 #"record"
0 0 23 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 9 #"hash-set!"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 6 #"object"
0 0 23 3 1 #" "
0 0 14 3 6 #"record"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"hash-set!"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 6 #"object"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 17 3 60
#";; function to add all items from objects list to hash table"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"add-objects"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"for-each"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"r"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 10 #"add-object"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 3 #") ("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 4 #"))) "
0 0 14 3 7 #"objects"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 86
(
 #";; put all items from objects list to objectdb (the database of all "
 #"items in the room)"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"add-objects"
0 0 23 3 1 #" "
0 0 14 3 8 #"objectdb"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 29 #";; remove an item from a room"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; you can't just remove an item to nowhere, so add it to invevtory"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 23 #"remove-object-from-room"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 53 #";; check whether hash table has an item with this key"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 6 #"record"
0 0 23 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 6 #"result"
0 0 23 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 17 #"string-suffix-ci?"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")) "
0 0 14 3 6 #"record"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 4 #"item"
0 0 23 3 2 #" ("
0 0 14 3 15 #"lset-difference"
0 0 23 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 6 #"record"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 40 #"\"I don\342\200\231t see that item in the room!\\n\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 25 #"\"Added ~a to your bag.\\n\""
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 10 #"add-object"
0 0 23 3 1 #" "
0 0 14 3 11 #"inventorydb"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 9 #"hash-set!"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 7 #" ))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; remove an item from inventory and put it to a room"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 28 #"remove-object-from-inventory"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 53 #";; check whether hash table has an item with this key"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 23 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 6 #"record"
0 0 23 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 6 #"result"
0 0 23 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 17 #"string-suffix-ci?"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")) "
0 0 14 3 6 #"record"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 4 #"item"
0 0 23 3 2 #" ("
0 0 14 3 15 #"lset-difference"
0 0 23 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 6 #"record"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 35 #"\"You are not carrying that item!\\n\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 29 #"\"Removed ~a from your bag.\\n\""
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 10 #"add-object"
0 0 23 3 1 #" "
0 0 14 3 8 #"objectdb"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 9 #"hash-set!"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; display objects in db (either room or inventory)"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";; functio improved to show empty room or bag"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"display-objects"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 6 #"record"
0 0 23 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 23 3 1 #" "
0 0 14 3 2 #"db"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"output"
0 0 23 3 2 #" ("
0 0 14 3 11 #"string-join"
0 0 23 3 1 #" "
0 0 14 3 6 #"record"
0 0 23 3 1 #" "
0 0 19 3 7 #"\" and \""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 23 3 1 #" "
0 0 14 3 6 #"output"
0 0 23 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 24 #"\"You are carrying ~a.\\n\""
0 0 23 3 1 #" "
0 0 14 3 6 #"output"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 19 #"\"You can see ~a.\\n\""
0 0 23 3 1 #" "
0 0 14 3 6 #"output"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 22 #"\"Your bag is empty.\\n\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 25 #"\"You can see no items.\\n\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"            ))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 22 #"\"Your bag is empty.\\n\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 25 #"\"You can see no items.\\n\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      ))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 18 #";; pick up an item"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"pick-item"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 5 #"input"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"item"
0 0 23 3 2 #" ("
0 0 14 3 11 #"string-join"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 2 #" ("
0 0 14 3 12 #"string-split"
0 0 23 3 1 #" "
0 0 14 3 5 #"input"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 23 #"remove-object-from-room"
0 0 23 3 1 #" "
0 0 14 3 8 #"objectdb"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";; drop an item"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"put-item"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 5 #"input"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"item"
0 0 23 3 2 #" ("
0 0 14 3 11 #"string-join"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 2 #" ("
0 0 14 3 12 #"string-split"
0 0 23 3 1 #" "
0 0 14 3 5 #"input"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 28 #"remove-object-from-inventory"
0 0 23 3 1 #" "
0 0 14 3 11 #"inventorydb"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; display what do we have in posession"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"display-inventory"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 15 #"display-objects"
0 0 23 3 1 #" "
0 0 14 3 11 #"inventorydb"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";; convert list of symbols to string"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"slist->string"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"string-join"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 14 #"symbol->string"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; function prints possible exits from a room (if any)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"get-directions"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 6 #"record"
0 0 23 3 2 #" ("
0 0 14 3 4 #"assq"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 13 #"decisiontable"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 6 #"result"
0 0 23 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 23 3 2 #" ("
0 0 14 3 6 #"second"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"record"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 52 #"\"You appear to have entered a room with no exits.\\n\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"            (("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 34 #"\"You can see an exit to the ~a.\\n\""
0 0 23 3 2 #" ("
0 0 14 3 13 #"slist->string"
0 0 23 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 5 #"losym"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")) "
0 0 14 3 6 #"result"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 5 #"lostr"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 13 #"slist->string"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")) "
0 0 14 3 5 #"losym"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 32 #"\"You can see exits to the ~a.\\n\""
0 0 23 3 2 #" ("
0 0 14 3 11 #"string-join"
0 0 23 3 1 #" "
0 0 14 3 5 #"lostr"
0 0 23 3 1 #" "
0 0 19 3 7 #"\" and \""
0 0 23 3 8 #"))))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 62
#";; find item (eq?) from assqlist by key \"id\" and return it cdr"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"assq-ref"
0 0 23 3 1 #" "
0 0 14 3 8 #"assqlist"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 23 3 2 #" ("
0 0 14 3 4 #"assq"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 8 #"assqlist"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 63
#";; find item (eqv?) from assqlist by key \"id\" and return it cdr"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"assv-ref"
0 0 23 3 1 #" "
0 0 14 3 8 #"assqlist"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 23 3 2 #" ("
0 0 14 3 4 #"assv"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 8 #"assqlist"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; find description of a room by id"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"get-response"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 8 #"assq-ref"
0 0 23 3 1 #" "
0 0 14 3 12 #"descriptions"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; get actions for room #id"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"get-keywords"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"keys"
0 0 23 3 2 #" ("
0 0 14 3 8 #"assq-ref"
0 0 23 3 1 #" "
0 0 14 3 13 #"decisiontable"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"key"
0 0 23 3 3 #") ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"key"
0 0 23 3 3 #")) "
0 0 14 3 4 #"keys"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 68
#";; function accepts keylist (list of lists of symbols) and tokenlist"
0 0 23 29 1 #"\n"
0 0 17 3 136
(
 #";; and returns list of numbers with keylist length where every item "
 #"is number showing how similar every possible action to entered input"
) 0 0 23 29 1 #"\n"
0 0 17 3 11 #";; example:"
0 0 23 29 1 #"\n"
0 0 17 3 155
(
 #";; '((road) (directions) (look) (examine room) (get) (pickup) (pick)"
 #" (put) (drop) (place) (remove) (inventory) (bag) (exit game) (quit g"
 #"ame) (exit) (quit))"
) 0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 4 #"exit"
0 0 17 3 6 #" quit)"
0 0 23 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 28 #"'(0 0 0 0 0 0 0 0 0 0 0 0 0 "
0 6          10 17 4 #"1/2\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 1 #" "
0 6          10 17 4 #"1/2\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 5 #" 1 1)"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; outputs a list in the form: (0 0 0 2 0 0)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"list-of-lengths"
0 0 23 3 1 #" "
0 0 14 3 7 #"keylist"
0 0 23 3 1 #" "
0 0 14 3 6 #"tokens"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"set"
0 0 23 3 2 #" ("
0 0 14 3 17 #"lset-intersection"
0 0 23 3 1 #" "
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 6 #"tokens"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 17 3 37 #";; apply some weighting to the result"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 1 #"*"
0 0 23 3 2 #" ("
0 0 14 3 1 #"/"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 3 #"set"
0 0 23 3 3 #") ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #")) ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 3 #"set"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 7 #"keylist"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 54 #";; return position of largest number in a numbers list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 23 #"index-of-largest-number"
0 0 23 3 1 #" "
0 0 14 3 15 #"list-of-numbers"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 19 #";; find largest num"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 23 3 1 #" "
0 0 14 3 15 #"list-of-numbers"
0 0 23 3 1 #" "
0 0 14 3 1 #">"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 2 #"#f"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 17 3 49 #";; find num index in list-of-numbers (zero-based)"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"list-index"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")) "
0 0 14 3 15 #"list-of-numbers"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";; find possible action which looks more similar to input then other"
 #"s"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 6 #"tokens"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 6 #"record"
0 0 23 3 2 #" ("
0 0 14 3 8 #"assv-ref"
0 0 23 3 1 #" "
0 0 14 3 13 #"decisiontable"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 7 #"keylist"
0 0 23 3 2 #" ("
0 0 14 3 12 #"get-keywords"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 5 #"index"
0 0 23 3 2 #" ("
0 0 14 3 23 #"index-of-largest-number"
0 0 23 3 2 #" ("
0 0 14 3 15 #"list-of-lengths"
0 0 23 3 1 #" "
0 0 14 3 7 #"keylist"
0 0 23 3 1 #" "
0 0 14 3 6 #"tokens"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"cadr"
0 0 23 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 6 #"record"
0 0 23 3 1 #" "
0 0 14 3 5 #"index"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 2 #"#f"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; main game loop"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"startgame"
0 0 23 3 1 #" "
0 0 14 3 10 #"initial-id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 1 #" "
0 0 14 3 4 #"loop"
0 0 23 3 3 #" (("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 10 #"initial-id"
0 0 23 3 3 #") ("
0 0 14 3 11 #"description"
0 0 23 3 1 #" "
0 0 20 3 2 #"#t"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 21 #";; print description?"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"when"
0 0 23 3 1 #" "
0 0 14 3 11 #"description"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 17 3 25 #";; print room description"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"~a\\n\""
0 0 23 3 2 #" ("
0 0 14 3 12 #"get-response"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 17 3 32 #";; what objects are in the room?"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 15 #"display-objects"
0 0 23 3 1 #" "
0 0 14 3 8 #"objectdb"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 15 #";; input prompt"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"> \""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 13 #";; read input"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 5 #"input"
0 0 23 3 2 #" ("
0 0 14 3 9 #"read-line"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 17 3 41 #";; split input to list of string by space"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 13 #"string-tokens"
0 0 23 3 2 #" ("
0 0 14 3 15 #"string-tokenize"
0 0 23 3 1 #" "
0 0 14 3 5 #"input"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"           "
0 0 17 3 36 #";; and convert it to list of symbols"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 6 #"tokens"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 14 #"string->symbol"
0 0 23 3 1 #" "
0 0 14 3 13 #"string-tokens"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 8 #"response"
0 0 23 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 6 #"tokens"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 23 3 1 #" "
0 0 14 3 8 #"response"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 8 #"response"
0 0 23 3 1 #" "
0 0 20 3 2 #"#t"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 1 #" "
0 0 14 3 8 #"response"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 6 #"format"
0 0 23 3 1 #" "
0 0 20 3 2 #"#t"
0 0 23 3 1 #" "
0 0 19 3 34 #"\"huh? I didn't understand that!\\n\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 8 #"response"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"look"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 14 #"get-directions"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 2 #"#t"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 8 #"response"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"pick"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 9 #"pick-item"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 5 #"input"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 8 #"response"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"drop"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 8 #"put-item"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 5 #"input"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 8 #"response"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"inventory"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 17 #"display-inventory"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"loop"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"              (("
0 0 14 3 3 #"eq?"
0 0 23 3 1 #" "
0 0 14 3 8 #"response"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"quit"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 6 #"format"
0 0 23 3 1 #" "
0 0 20 3 2 #"#t"
0 0 23 3 1 #" "
0 0 19 3 43 #"\"So Long, and Thanks for All the Fish...\\n\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"exit"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";(startgame 1)"
0           0
